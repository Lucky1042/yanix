#include <stdint.h>
#include "vfs_node.h"
#include "../../kernel/memorymanagement/heap.h"
#include "../../libc/string/string.h"

/*
 * this file contains code to interact with the virtual filesystem lookup table
 * this table is a linked list
 * (inode table) 
*/

struct vfs_lookup_entry_s *g_vfs_lookup_start;

/**
 * @brief      The entry struct for the lookup table
 */
struct vfs_lookup_entry_s {
	uint32_t 					inode;
	vfs_node_t 					*pointer;
	struct vfs_lookup_entry_s 	*next;
};

/**
 * @brief      This function initializes the virtual filesystem lookup table
 *
 * @param      root  The root directory inode
 */
void init_vfs_lookuptable(vfs_node_t* root)
{
	g_vfs_lookup_start = (struct vfs_lookup_entry_s*) kmalloc(sizeof(struct vfs_lookup_entry_s));
	memset(g_vfs_lookup_start, 0, sizeof(struct vfs_lookup_entry_s));
	g_vfs_lookup_start->inode 	= root->id;
	g_vfs_lookup_start->pointer	= root;
}


/**
 * @brief      Finds an inode to the lookup table
 *
 * @param[in]  inode  The inode id number
 *
 * @return     returns the pointer corresponding to the inode id number (and 0 when an error occurs)
 */
vfs_node_t *find_inode_pointer(uint32_t inode)
{
	struct vfs_lookup_entry_s *tmp = g_vfs_lookup_start;
	do {
		if (inode == tmp->inode) {
			return tmp->pointer;
		}
	} while (tmp->next != 0);
	return 0;
}

/**
 * @brief      Adds an inode to lookup.
 *
 * @param      pointer  The pointer of the inode
 * @param[in]  inode    The inode id number
 *
 * @return     returns 0 when succeeds and 1 when an memory error occurs 
 */
int add_inode_to_lookup(vfs_node_t* pointer, uint32_t inode)
{
	struct vfs_lookup_entry_s *tmp = g_vfs_lookup_start;
	while (tmp->next != 0) {
		tmp = tmp->next;
	}
	tmp->next = (struct vfs_lookup_entry_s*) kmalloc(sizeof(struct vfs_lookup_entry_s));
	if (tmp->next == 0) {
		return 1;
	}
	tmp->next->inode 	= inode;
	tmp->next->pointer 	= pointer;
	return 0;
}

