##
## @defgroup   YANIX Makefile
##
## @brief      This file implements the kernel Makefile.
##
## @author     Robbe De Greef
## @date       2019
##

# Constants 
ARCH = i386

# Finding all the source files
C_SOURCES = $(shell find ./ -type f -name '*.c'   ! -path "./userspace/*" ! -path "./.*/*" ! -path "./arch/*")
HEADERS   = $(shell find ./ -type f -name '*.h'   ! -path "./userspace/*" ! -path "./.*/*" ! -path "./arch/*")

# Adding correct arch folder
C_SOURCES += $(shell find "./arch/$(ARCH)/" -type f -name "*.c")
HEADER    += $(shell find "./arch/$(ARCH)/" -type f -name "*.h")
ASMFILES   = $(shell find "./arch/$(ARCH)/" -type f -name "*.asm" ! -path "./arch/$(ARCH)/boot/*")


# Defining the objects to build
OBJECTS = ${C_SOURCES:.c=.o}
OBJECTS += ${ASMFILES:.asm=.o}

#FLAGS = -g -m32 -fno-pie -fno-builtin -fno-stack-protector -nostartfiles -nodefaultlibs -Wall -Wextra -Werror

# is -O2 compatible but is turned off for now because i wan't to be certain that the code just runs fine first (bugs come later)
FLAGS = -g -Wall -Wextra -Werror -ffreestanding -I ./ -I ./include



testing:
	make clean
	make _testing

_testing: os-image.bin kernel.elf
	qemu-system-x86_64 -s -d guest_errors -m 512M -hda os-image.bin -no-reboot &
	gdb -ex "target remote localhost:1234" -ex "symbol-file kernel.elf"

ramdisk.iso:
	fallocate -l 384K ramdisk.iso
	mkfs.ext2 ramdisk.iso
	#python3 tools/buildramdisk.py
	
padding:
	fallocate -l 64K padding
	python3 tools/buildramdisk.py 65536

kernel.bin: arch/$(ARCH)/boot/enter_kernel.o ${OBJECTS}
	/usr/share/crosscompiler/bin/bin/i686-elf-ld -T linker.ld -m elf_i386 -o $@ -Ttext 0x70000 $^ --oformat binary
	

kernel.elf: arch/$(ARCH)/boot/enter_kernel.o ${OBJECTS}
	/usr/share/crosscompiler/bin/bin/i686-elf-ld -T linker.ld -m elf_i386 -o $@ -Ttext 0x70000 $^ 

run: os-image.bin
	qemu-system-x86_64 ${QEMU_FLAGS} ${QEMU_NETWORK_FLAGS} # -enable-kvm
	# this will start qemu with 2 devices (floppies) one for the kernel and one just as read write disk

run_no_network: os-image.bin
	qemu-system-x86_64 ${QEMU_FLAGS} -enable-kvm

debug: os-image.bin kernel.elf
	qemu-system-x86_64 -s -d guest_errors ${QEMU_FLAGS} ${QEMU_NETWORK_FLAGS} -enable-kvm &
	gdb -ex "target remote localhost:1234" -ex "symbol-file kernel.elf"

%.o: %.c ${HEADERS}
	/usr/share/crosscompiler/bin/bin/i686-elf-gcc ${FLAGS} -c $< -o $@

%.o: %.asm
	nasm $< -f elf -o $@

%.bin: %.asm
	nasm $< -f bin -o $@

monitor_network: os-image.bin
	qemu-system-x86_64 ${QEMU_FLAGS} 
	tshark -r networkdump.dat 

mount_ramdisk: ramdisk.iso
	mount -o loop ./ramdisk.iso /media/iso
	gnome-terminal --working-directory=/media/iso 	# starts a shell in the ramdisk (for convenience)

umount_ramdisk:
	umount /media/iso

clean_ramdisk:
	rm ramdisk.iso 

clean:
	rm -rf *.bin *.dis *.o os-image.bin *.elf padding
	rm -rf boot/*.o boot/*.bin ${OBJECTS}

backup:
	make clean
	python3 tools/backup_os.py
	
linecount:
	python3 tools/linecounter.py

cc_env:
	# starting cross compiling environment 
	gnome-terminal -x bash -c 'export PATH="/usr/share/crosscompiler/hosted/gcc/bin/:$$PATH"; export PATH="/usr/share/crosscompiler/hosted/binutils/i686-yanix/bin/:$$PATH"; export PATH="/usr/share/crosscompiler/hosted/binutils/bin/:$$PATH"; exec bash'
